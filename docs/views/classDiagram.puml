@startuml classDiagram
title BrokerX - Class Diagram (Microservices Architecture)

package "AuthService" {
    class UserCredential {
        -id : Long
        -email : String
        -passwordHash : String
        -status : UserStatus
        -verificationToken : String
        -otpCode : String
        -otpExpiry : LocalDateTime
        +validatePassword(password : String) : boolean
        +generateOTP() : String
        +isOTPValid(code : String) : boolean
    }
    
    enum UserStatus {
        PENDING
        ACTIVE  
        INACTIVE
    }
}

package "ClientService" {
    class Client {
        -clientId : Long
        -name : String
        -email : String
        -verificationToken : String
        -statut : String
        +isVerified() : boolean
        +generateToken() : String
    }
}

package "WalletService" {
    class Wallet {
        -walletId : Long
        -ownerEmail : String
        -balance : BigDecimal
        +credit(amount : BigDecimal) : void
        +debit(amount : BigDecimal) : boolean
        +hasBalance(amount : BigDecimal) : boolean
    }
}

package "OrderService" {
    class Order {
        -orderId : Long
        -clientId : Long
        -symbol : String
        -price : BigDecimal
        -quantity : Integer
        -status : OrderStatus
        -orderType : OrderType
        -timestamp : LocalDateTime
        +calculateTotal() : BigDecimal
        +canExecute() : boolean
    }
    
    class Transaction {
        -transactionId : Long
        -orderId : Long
        -type : TransactionType
        -amount : BigDecimal
        -dateTransaction : LocalDateTime
        -description : String
    }
    
    enum OrderStatus {
        PENDING
        EXECUTED
        CANCELLED
        FAILED
    }
    
    enum OrderType {
        BUY
        SELL
    }
    
    enum TransactionType {
        ORDER
        DEPOSIT
        WITHDRAWAL
    }
}

package "MatchingService" {
    class MatchingOrder {
        -id : Long
        -orderId : Long
        -stockSymbol : String
        -quantity : Integer
        -remainingQuantity : Integer
        -price : BigDecimal
        -orderType : OrderType
        -timestamp : LocalDateTime
        -status : MatchingStatus
        +match(otherOrder : MatchingOrder) : boolean
        +isFullyMatched() : boolean
    }
    
    enum MatchingStatus {
        PENDING
        PARTIALLY_MATCHED
        FULLY_MATCHED
        CANCELLED
    }
}

' Relationships
UserCredential ||--|| UserStatus
Client ||--o{ Order : places
Order ||--|| OrderStatus
Order ||--|| OrderType
Order ||--o{ Transaction : generates
Transaction ||--|| TransactionType
MatchingOrder ||--|| MatchingStatus
MatchingOrder ||--|| OrderType
Order ||--o| MatchingOrder : becomes

' Cross-service relationships (via APIs)
Client ||--|| Wallet : owns (via email)
Order ||--|| Client : belongsTo (via clientId)
Order ||--|| Wallet : usesBalance (via clientEmail)

@enduml