@startuml cu05_seq1
title Achat d'actions

actor User
participant Frontend
participant Gateway
participant OrderService
participant WalletService
participant MatchingService
database OrderDB
queue RabbitMQ

User -> Frontend: place order
Frontend -> Gateway: POST /api/orders/place
Gateway -> OrderService: placeOrder(request)

OrderService -> WalletService: checkBalance
WalletService --> OrderService: balance ok

alt Solde suffisant
    OrderService -> WalletService: debitFunds
    WalletService --> OrderService: success
    OrderService -> OrderDB: save order
    OrderDB --> OrderService: order saved
    OrderService -> RabbitMQ: publish order
    RabbitMQ --> MatchingService: new order
    OrderService --> Gateway: success
    Gateway --> Frontend: order placed
    Frontend --> User: Ordre placé
else Solde insuffisant
    OrderService --> Gateway: insufficient funds
    Gateway --> Frontend: error
    Frontend --> User: Solde insuffisant
end

OrderService -> ClientClient : getClientById(clientId)
ClientClient -> Gateway : GET /api/clients/{id}
Gateway --> ClientClient : Client details
ClientClient --> OrderService : Client

OrderService -> WalletClient : getWallet(clientEmail)
WalletClient -> Gateway : GET /api/wallet/{email}
Gateway --> WalletClient : Wallet details
WalletClient --> OrderService : Wallet

alt Solde suffisant
    OrderService -> WalletClient : debitFunds(email, amount)
    WalletClient -> Gateway : POST /api/wallet/debit
    Gateway --> WalletClient : Success
    WalletClient --> OrderService : Success
    
    OrderService -> OrderRepo : save(Order)
    OrderRepo -> OrderDB : persist
    OrderDB --> OrderRepo : Order saved
    OrderRepo --> OrderService : Order
    
    OrderService -> TransactionRepo : save(Transaction)
    TransactionRepo -> OrderDB : persist
    OrderDB --> TransactionRepo : Transaction saved
    TransactionRepo --> OrderService : Transaction
    
    OrderService -> Producer : sendOrderToMatching(Order)
    Producer -> MQ : publish order
    MQ --> MatchingService : deliver order for matching
    
    OrderService --> OrderController : Order created
    OrderController --> Gateway : 201 Created
    Gateway --> Frontend : Success
    Frontend --> User : "Ordre placé avec succès"

else Solde insuffisant
    OrderService --> OrderController : InsufficientFundsException
    OrderController --> Gateway : 400 Bad Request
    Gateway --> Frontend : Error
    Frontend --> User : "Solde insuffisant"
end

@enduml
