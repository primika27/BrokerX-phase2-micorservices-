@startuml deployment
title "BrokerX - Deployment Architecture"

actor "User Browser" as user

' Development Environment
node "Development Environment" as devenv {
  node "Local Machine" as local {
    artifact "Source Code\n(Spring Boot Microservices)" as src
    artifact "docker-compose.yml" as compose
    component "Docker Desktop" as docker
  }

  node "GitHub" as github {
    node "Repository" as repo
    node "CI/CD Pipeline" as cicd {
      artifact "Maven Build" as maven
      artifact "Docker Images" as images
      artifact "Health Checks" as health
    }
  }
}

' Runtime Environment
node "Docker Host Server" as server {
  node "Docker Network" as network {
    
    ' Frontend
    node "React Frontend" as frontend {
      component "React App\n(TypeScript)" as reactapp
      component "Vite Dev Server\n:5173" as vite
    }

    ' Gateway
    node "Gateway Container :8080" as gateway {
      component "Spring Cloud Gateway\nJWT Authentication\nRouting" as gw
    }

    ' Auth Service
    node "Auth Service Container :8081" as auth {
      component "Authentication Service\nJWT + OTP\nEmail Service" as authapp
      database "AuthDB (H2)" as authdb
    }

    ' Client Service
    node "Client Service Container :8082" as client {
      component "Client Management\nRegistration\nProfile" as clientapp
      database "ClientDB (H2)" as clientdb
    }

    ' Wallet Service
    node "Wallet Service Container :8083" as wallet {
      component "Wallet Management\nBalance Operations\nTransactions" as walletapp
      database "WalletDB (H2)" as walletdb
    }

    ' Order Service
    node "Order Service Container :8084" as order {
      component "Order Processing\nBuy/Sell Orders\nTransaction History" as orderapp
      database "OrderDB (H2)" as orderdb
    }
    
    ' Matching Service
    node "Matching Service Container :8085" as matching {
      component "Order Matching\nMarket Making\nExecution Engine" as matchingapp
      database "MatchingDB (H2)" as matchingdb
    }
    
    ' Message Queue
    node "RabbitMQ Container :5672" as rabbitmq {
      component "Message Broker\norderQueue\nmatchingQueue" as mq
    }
  }

  folder "Persistent Volumes" as volumes {
    artifact "./data/auth/" as authvol
    artifact "./data/client/" as clientvol
    artifact "./data/wallet/" as walletvol
    artifact "./data/order/" as ordervol
    artifact "./data/matching/" as matchingvol
    artifact "./data/rabbitmq/" as mqvol
  }
}

' User Interactions
user --> reactapp : HTTP Browser
reactapp --> gw : API Calls :8080

' Gateway Routing
gw --> authapp : /api/auth/**
gw --> clientapp : /api/clients/**
gw --> walletapp : /api/wallet/**
gw --> orderapp : /api/orders/**

' Inter-Service Communication (via Gateway)
clientapp --> gw : Feign Auth Calls
orderapp --> gw : Feign Wallet Calls
orderapp --> gw : Feign Client Calls

' Message Queue Communication
orderapp --> mq : Publish Orders
mq --> matchingapp : Consume Orders

' Database Connections
authapp --> authdb
clientapp --> clientdb
walletapp --> walletdb
orderapp --> orderdb
matchingapp --> matchingdb

' Volume Mappings
authdb --> authvol
clientdb --> clientvol
walletdb --> walletvol
orderdb --> ordervol
matchingdb --> matchingvol
mq --> mqvol

' === CI/CD Flow ===
dev --> repo : git push
actions --> maven : mvn test / package
maven --> image : docker build brokerx-*
image --> healthcheck : docker run + curl /actuator/health
actions --> registry : push (optionnel)
registry --> vm : pull (optionnel)
dev --> vm : docker compose up -d

' === Notes explicatives ===
note right of gw
**Gateway (8080)**  
- Point d’entrée unique  
- Validation JWT & routage  
- Ajout headers X-Authenticated-User  
end note

note bottom of wallet
**WalletService**  
- Gère les dépôts, retraits et soldes  
- Appelé par OrderService via Feign  
end note

note bottom of vm
Chaque microservice possède :  
- Un conteneur indépendant  
- Sa propre base H2 (Database per Service)  
- Communication HTTP via le Gateway  
- Tests santé : `/actuator/health`  
end note

' Additional Notes
note bottom of mq
**RabbitMQ Message Queue**
- Asynchronous order processing
- Event-driven architecture
- Decoupled microservices
end note

note bottom of matchingapp
**Matching Service**
- Order matching engine
- Market making algorithm
- Trade execution logic
end note

note bottom of reactapp
**React Frontend**
- TypeScript-based UI
- JWT authentication
- Protected routes
- API service layer
end note

@enduml
