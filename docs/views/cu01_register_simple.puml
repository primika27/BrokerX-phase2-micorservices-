@startuml cu01_register
title User Registration

actor User
participant Gateway
participant ClientService
participant AuthService 
participant UserCredentials 
participant EmailService
participant client
database ClientDB
database AuthDB

User -> Gateway: Post /clients/register
Gateway -> ClientService: register(name :String, email :String, password :String)
ClientService -> ClientDB: findByEmail(email: String)

alt Email available
    ClientService ->    AuthService: create credentials  
    AuthService -> AuthDB: save user credentials 
    ClientService --> Client: new Client()
    Client-->ClientService: new client object
    ClientService--> ClientDB: save(client:Client)
    AuthService -> EmailService: sendVerificationEmail(email)
    EmailService --> AuthService: email sent
    AuthService --> ClientService: success
    ClientService --> Gateway: registration success
    Gateway --> User: success response : Check your email for verification
else Email exists
    ClientDB --> ClientService: email exists
    ClientService --> Gateway: error response
    Gateway --> User: email already used
end

@enduml
public Client register(String name, String email, String motDePasse) {
    if (clientRepository.findByEmail(email) != null) {
        throw new IllegalArgumentException("Email already used");
    }

    // 1. Tell Auth Service to register credentials
    authClient.createUserCredential(new UserCredentialRequest(email, motDePasse));

    // 2. Create the client profile
    int verificationToken = UUID.randomUUID().hashCode();
    Client client = new Client(0, name, email, verificationToken, "PENDING");
    client = clientRepository.save(client);
    sendVerificationEmail(client);
    return client;
    }