@startuml cu01_seq2
actor User
participant Frontend  
participant Gateway
participant ClientService

User -> Frontend: register
Frontend -> Gateway: request
Gateway -> ClientService: create
ClientService --> Gateway: created
Gateway --> Frontend: success
Frontend --> User: done
@enduml

alt Email déjà existant
    ClientService -> ClientRepo : findByEmail(email)
    ClientRepo --> ClientService : Client existant
    ClientService --> ClientController : IllegalArgumentException("Email déjà utilisé")
    ClientController --> Gateway : 400 Bad Request
    Gateway --> Frontend : Error Response
    Frontend --> User : "Email déjà utilisé"

else Email disponible
    ClientService -> ClientRepo : save(nouveau Client)
    ClientRepo -> ClientDB : persist
    ClientDB --> ClientRepo : Client sauvegardé
    ClientRepo --> ClientService : Client

    ClientService -> AuthClient : POST /api/auth/register
    AuthClient -> Gateway : via Feign
    Gateway -> AuthController : register(AuthRequest)
    
    AuthController -> AuthService : register(email, password)
    AuthService -> UserRepo : save(UserCredential)
    UserRepo -> AuthDB : persist
    AuthDB --> UserRepo : UserCredential sauvegardé
    UserRepo --> AuthService : UserCredential
    
    AuthService -> EmailService : sendVerificationEmail(email, token)
    EmailService -> SMTP : send verification email
    SMTP --> EmailService : email sent
    EmailService --> AuthService : void
    
    AuthService --> AuthController : success
    AuthController --> Gateway : 201 Created
    Gateway --> AuthClient : success
    AuthClient --> ClientService : success
    
    ClientService --> ClientController : Client
    ClientController --> Gateway : 201 Created
    Gateway --> Frontend : Success Response
    Frontend --> User : "Inscription réussie! Vérifiez votre email"
end

== Vérification Email ==
User -> User : clique lien dans email
User -> Frontend : GET /verify?token=xxx
Frontend -> Gateway : GET /api/auth/verify?token=xxx
Gateway -> AuthController : verify(token)

AuthController -> AuthService : verifyEmail(token)
AuthService -> UserRepo : findByVerificationToken(token)
UserRepo -> AuthDB : query
AuthDB --> UserRepo : UserCredential
UserRepo --> AuthService : UserCredential

alt Token valide
    AuthService -> UserRepo : updateStatus(ACTIVE)
    UserRepo -> AuthDB : update
    AuthDB --> UserRepo : updated
    UserRepo --> AuthService : success
    
    AuthService --> AuthController : true
    AuthController --> Gateway : 200 OK
    Gateway --> Frontend : Success
    Frontend --> User : "Email vérifié avec succès!"

else Token invalide/expiré
    AuthService --> AuthController : false
    AuthController --> Gateway : 400 Bad Request
    Gateway --> Frontend : Error
    Frontend --> User : "Lien de vérification invalide"
end

@enduml
