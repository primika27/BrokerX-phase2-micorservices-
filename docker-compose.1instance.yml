version: '3.8'

services:
  # Base Services (unchanged for all configs)
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - brokerx-network

  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - brokerx-network

  redis:
    image: redis:7.0
    ports:
      - "6379:6379"
    networks:
      - brokerx-network

  # === 1 INSTANCE CONFIGURATION ===
  # Gateway - Single Instance
  gateway-service:
    build:
      context: ./gatewayService
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=prod
      - SERVER_PORT=8080
    depends_on:
      - kafka
      - redis
    networks:
      - brokerx-network

  # Auth Service - Single Instance
  auth-service:
    build:
      context: ./authService/authService
      dockerfile: Dockerfile
    ports:
      - "8101:8101"
    environment:
      - SPRING_PROFILES_ACTIVE=prod
      - SERVER_PORT=8101
    depends_on:
      - kafka
      - redis
    networks:
      - brokerx-network

  # Client Service - Single Instance
  client-service:
    build:
      context: ./clientService/clientService
      dockerfile: Dockerfile
    ports:
      - "8201:8201"
    environment:
      - SPRING_PROFILES_ACTIVE=prod
      - SERVER_PORT=8201
    depends_on:
      - kafka
      - redis
    networks:
      - brokerx-network

  # Wallet Service - Single Instance
  wallet-service:
    build:
      context: ./walletService/walletService
      dockerfile: Dockerfile
    ports:
      - "8301:8301"
    environment:
      - SPRING_PROFILES_ACTIVE=prod
      - SERVER_PORT=8301
    depends_on:
      - kafka
      - redis
    networks:
      - brokerx-network

  # Order Service - Single Instance
  order-service:
    build:
      context: ./orderService/orderService
      dockerfile: Dockerfile
    ports:
      - "8401:8401"
    environment:
      - SPRING_PROFILES_ACTIVE=prod
      - SERVER_PORT=8401
    depends_on:
      - kafka
      - redis
    networks:
      - brokerx-network

  # Matching Service - Single Instance
  matching-service:
    build:
      context: ./matchingService/matchingService
      dockerfile: Dockerfile
    ports:
      - "8501:8501"
    environment:
      - SPRING_PROFILES_ACTIVE=prod
      - SERVER_PORT=8501
    depends_on:
      - kafka
      - redis
    networks:
      - brokerx-network

  # Monitoring Stack
  nginx-lb:
    image: nginx:alpine
    ports:
      - "80:80"
    volumes:
      - ./monitoring/nginx/nginx-1instance.conf:/etc/nginx/nginx.conf
    depends_on:
      - gateway-service
    networks:
      - brokerx-network

  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus/prometheus-1instance.yml:/etc/prometheus/prometheus.yml
    networks:
      - brokerx-network

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=brokerx123
    volumes:
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    networks:
      - brokerx-network

networks:
  brokerx-network:
    driver: bridge