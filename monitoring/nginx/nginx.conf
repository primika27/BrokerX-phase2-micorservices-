events {
    worker_connections 1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;
    
    # Log format for monitoring
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    'rt=$request_time uct="$upstream_connect_time" '
                    'uht="$upstream_header_time" urt="$upstream_response_time"';

    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log warn;
    
    # Upstream definitions with Load Balancing
    upstream backend_gateway {
        least_conn;
        server gateway-1:8080 weight=1 max_fails=3 fail_timeout=30s;
        server gateway-2:8080 weight=1 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }
    
    upstream backend_auth {
        ip_hash;  # Session stickiness for auth
        server auth-service-1:8081 weight=1 max_fails=3 fail_timeout=30s;
        server auth-service-2:8081 weight=1 max_fails=3 fail_timeout=30s;
        keepalive 16;
    }
    
    upstream backend_client {
        least_conn;
        server client-service-1:8082 weight=1 max_fails=3 fail_timeout=30s;
        server client-service-2:8082 weight=1 max_fails=3 fail_timeout=30s;
        keepalive 16;
    }
    
    upstream backend_wallet {
        least_conn;
        server wallet-service-1:8083 weight=1 max_fails=3 fail_timeout=30s;
        server wallet-service-2:8083 weight=1 max_fails=3 fail_timeout=30s;
        keepalive 16;
    }
    
    upstream backend_order {
        least_conn;
        server order-service-1:8084 weight=1 max_fails=3 fail_timeout=30s;
        server order-service-2:8084 weight=1 max_fails=3 fail_timeout=30s;
        keepalive 16;
    }
    
    # Rate limiting
    limit_req_zone $binary_remote_addr zone=api:10m rate=100r/s;
    limit_req_zone $binary_remote_addr zone=auth:10m rate=10r/s;
    
    # Main server
    server {
        listen 80;
        server_name localhost;
        
        # Health check endpoints
        location /nginx-health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
        
        # Load balancer health endpoint for k6 tests
        location /health {
            access_log off;
            return 200 '{"status":"UP","service":"nginx-load-balancer","upstreams":{"gateway":"available","auth":"available","client":"available","wallet":"available","order":"available"}}\n';
            add_header Content-Type application/json;
        }
        
        # Auth endpoints with rate limiting
        location /api/auth/ {
            limit_req zone=auth burst=20 nodelay;
            
            proxy_pass http://backend_auth;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Timeouts
            proxy_connect_timeout 5s;
            proxy_send_timeout 10s;
            proxy_read_timeout 10s;
        }

        # Client endpoints
        location /api/clients/ {
            limit_req zone=api burst=200 nodelay;
            
            proxy_pass http://backend_client;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Timeouts
            proxy_connect_timeout 5s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
        }

        # Wallet endpoints
        location /api/wallets/ {
            limit_req zone=api burst=200 nodelay;
            
            proxy_pass http://backend_wallet;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Timeouts
            proxy_connect_timeout 5s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
        }

        # Order endpoints
        location /api/orders/ {
            limit_req zone=api burst=200 nodelay;
            
            proxy_pass http://backend_order;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Timeouts
            proxy_connect_timeout 5s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
        }
        
        # API endpoints (Gateway as fallback)
        location /api/ {
            limit_req zone=api burst=200 nodelay;
            
            proxy_pass http://backend_gateway;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Timeouts
            proxy_connect_timeout 5s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
        }
        
        # Frontend static files (if served by NGINX)
        location / {
            proxy_pass http://frontend:5173;  # Vite dev server
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # WebSocket support for Vite HMR
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
        }
    }
    
    # Status server for monitoring
    server {
        listen 8888;
        server_name localhost;
        
        location /nginx_status {
            stub_status on;
            access_log off;
            allow 127.0.0.1;
            allow 172.16.0.0/12;  # Docker networks
            deny all;
        }
        
        location /health {
            access_log off;
            return 200 "OK";
            add_header Content-Type text/plain;
        }
    }
}