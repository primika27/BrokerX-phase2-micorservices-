events {
    worker_connections 1024;
}

http {
    # Rate limiting
    limit_req_zone $binary_remote_addr zone=api:10m rate=120r/s;
    
    # Upstream for 4 instances
    upstream gateway_backend {
        least_conn;
        server gateway-service-1:8080;
        server gateway-service-2:8080;
        server gateway-service-3:8080;
        server gateway-service-4:8080;
    }
    
    upstream auth_backend {
        ip_hash;
        server auth-service-1:8101;
        server auth-service-2:8101;
        server auth-service-3:8101;
        server auth-service-4:8101;
    }
    
    upstream client_backend {
        least_conn;
        server client-service-1:8201;
        server client-service-2:8201;
        server client-service-3:8201;
        server client-service-4:8201;
    }
    
    upstream wallet_backend {
        least_conn;
        server wallet-service-1:8301;
        server wallet-service-2:8301;
        server wallet-service-3:8301;
        server wallet-service-4:8301;
    }
    
    upstream order_backend {
        least_conn;
        server order-service-1:8401;
        server order-service-2:8401;
        server order-service-3:8401;
        server order-service-4:8401;
    }
    
    upstream matching_backend {
        server matching-service:8501;
    }

    server {
        listen 80;
        
        # Health check endpoint
        location /nginx-health {
            access_log off;
            return 200 '{"status":"healthy","instances":4,"load_balancer":"nginx","timestamp":"$time_iso8601"}';
            add_header Content-Type application/json;
        }
        
        # Health endpoints for load balancer
        location /health {
            access_log off;
            return 200 '{"status":"healthy","instances":4,"backend":"all_services","timestamp":"$time_iso8601"}';
            add_header Content-Type application/json;
        }
        
        # Apply rate limiting
        limit_req zone=api burst=40 nodelay;
        
        # Auth Service
        location /api/auth/ {
            proxy_pass http://auth_backend/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }
        
        # Client Service
        location /api/clients/ {
            proxy_pass http://client_backend/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }
        
        # Wallet Service
        location /api/wallets/ {
            proxy_pass http://wallet_backend/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }
        
        # Order Service
        location /api/orders/ {
            proxy_pass http://order_backend/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }
        
        # Matching Service
        location /api/matching/ {
            proxy_pass http://matching_backend/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }
        
        # Default route to gateway
        location /api/ {
            proxy_pass http://gateway_backend/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }

        # Frontend
        location / {
            proxy_pass http://frontend:5173/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
        }
    }
}