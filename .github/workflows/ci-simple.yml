name: BrokerX CI/CD - Simple Test

on:
  push:
    branches: [ main, master, frontend+nginx ]
  pull_request:
    branches: [ main, master ]

jobs:
  test-and-build:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Create test environment variables
        run: |
          echo "JWT_SECRET=YnJva2VyWFNlY3JldEtleUZvckpXVFNpZ25pbmdTdXBlckxvbmdTdHJpbmdUaGF0SXNTZWN1cmU=" >> $GITHUB_ENV
          echo "EMAIL_USER=test@example.com" >> $GITHUB_ENV
          echo "EMAIL_PASS=testpass" >> $GITHUB_ENV

      - name: Test AuthService
        working-directory: authService/authService
        run: |
          chmod +x ./mvnw
          ./mvnw clean test -Dspring.profiles.active=test

      - name: Test ClientService
        working-directory: clientService/clientService
        run: |
          chmod +x ./mvnw
          ./mvnw clean test -Dspring.profiles.active=test

      - name: Test WalletService  
        working-directory: walletService/walletService
        run: |
          chmod +x ./mvnw
          ./mvnw clean test -Dspring.profiles.active=test

      - name: Test OrderService
        working-directory: orderService/orderService
        run: |
          chmod +x ./mvnw
          ./mvnw clean test -Dspring.profiles.active=test

      - name: Test Gateway
        working-directory: gatewayService
        run: |
          chmod +x ./mvnw
          ./mvnw clean test -Dspring.profiles.active=test

      - name: Build all services
        run: |
          echo "Building AuthService..."
          cd authService/authService && chmod +x ./mvnw && ./mvnw clean package -DskipTests
          cd ../..
          
          echo "Building ClientService..."
          cd clientService/clientService && chmod +x ./mvnw && ./mvnw clean package -DskipTests
          cd ../..
          
          echo "Building WalletService..."
          cd walletService/walletService && chmod +x ./mvnw && ./mvnw clean package -DskipTests
          cd ../..
          
          echo "Building OrderService..."
          cd orderService/orderService && chmod +x ./mvnw && ./mvnw clean package -DskipTests
          cd ../..
          
          echo "Building Gateway..."
          cd gatewayService && chmod +x ./mvnw && ./mvnw clean package -DskipTests
          cd ..

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: jar-artifacts
          path: |
            authService/authService/target/*.jar
            clientService/clientService/target/*.jar
            walletService/walletService/target/*.jar
            orderService/orderService/target/*.jar
            gatewayService/target/*.jar

      - name: Test Docker builds
        run: |
          echo "Testing Docker image builds..."
          
          # Test Gateway build
          docker build -t brokerx-gateway:test ./gatewayService
          
          # Test AuthService build  
          docker build -t brokerx-auth:test ./authService/authService
          
          echo "Docker builds successful!"

      - name: Run basic integration test
        run: |
          echo "Running basic integration tests..."
          
          # Start a simple test container
          docker run -d --name test-gateway -p 18080:8080 \
            -e JWT_SECRET=YnJva2VyWFNlY3JldEtleUZvckpXVFNpZ25pbmdTdXBlckxvbmdTdHJpbmdUaGF0SXNTZWN1cmU= \
            -e SPRING_PROFILES_ACTIVE=test \
            brokerx-gateway:test
            
          # Wait for startup
          sleep 30
          
          # Test health endpoint
          for i in {1..10}; do
            if curl -f http://localhost:18080/actuator/health; then
              echo "Health check passed!"
              break
            fi
            echo "Attempt $i: waiting for service..."
            sleep 5
          done
          
          # Cleanup
          docker stop test-gateway
          docker rm test-gateway

  summary:
    runs-on: ubuntu-latest
    needs: test-and-build
    if: always()
    
    steps:
      - name: Test Results Summary
        run: |
          echo "=== BrokerX CI/CD Test Summary ==="
          echo "Build Status: ${{ needs.test-and-build.result }}"
          
          if [ "${{ needs.test-and-build.result }}" == "success" ]; then
            echo "✅ All tests passed!"
            echo "✅ All services built successfully"
            echo "✅ Docker images created"
            echo "✅ Integration test passed"
            echo ""
            echo "Ready for deployment to production environment"
          else
            echo "❌ Some tests failed"
            echo "Check the logs above for details"
          fi